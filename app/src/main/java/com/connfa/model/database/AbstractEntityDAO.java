package com.connfa.model.database;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;

import java.util.LinkedList;
import java.util.List;

public abstract class AbstractEntityDAO<E extends AbstractEntity<I>, I> {

    private final Context context;

    public AbstractEntityDAO(Context context) {
        this.context = context;
    }

    protected abstract String getSearchCondition();

    /**
     * @param theId the id of object to search
     * @return list of arguments, generated by object id.
     */
    protected abstract String[] getSearchConditionArguments(I theId);

    protected abstract String getTableName();

    public abstract String getDatabaseName();

    protected abstract E newInstance();

    /**
     * This method should return list of columns, used to define unique object
     * in "contains" method
     */
    protected abstract String[] getKeyColumns();

    protected Context getContext() {
        return context;
    }

    protected ILAPIDBFacade getFacade() {
        return LAPIDBRegister.getInstance().lookup(getDatabaseName());
    }

    private boolean containsData(E theObj) {
        ILAPIDBFacade facade = getFacade();
        return theObj.getId() != null
                && facade.containsRecord(getTableName(), getSearchCondition(), getSearchConditionArguments(theObj.getId()), getKeyColumns());

    }

    public int deleteData(I theObj) {
        ILAPIDBFacade facade = getFacade();
        return facade.delete(getTableName(), getSearchCondition(),
                             getSearchConditionArguments(theObj)
        );
    }

    public int deleteDataSafe(I theObj) {
        ILAPIDBFacade facade = getFacade();

        try {
            facade.open();

            return facade.delete(getTableName(), getSearchCondition(),
                                 getSearchConditionArguments(theObj)
            );
        } finally {
            facade.close();
        }
    }

    public int deleteAll() {
        ILAPIDBFacade facade = getFacade();
        return facade.delete(getTableName(), null, null);
    }

    public int deleteAllSafe() {
        ILAPIDBFacade facade = getFacade();

        try {
            facade.open();

            return facade.delete(getTableName(), null, null);
        } finally {
            facade.close();
        }
    }

    public List<E> getDataSafe(String theCondition, String[] theArguments) {
        ILAPIDBFacade facade = getFacade();

        try {
            facade.open();
            return getData(theCondition, theArguments);

        } finally {
            facade.close();
        }

    }

    public List<E> getDataSafe(I theObj) {
        return getDataSafe(getSearchCondition(), getSearchConditionArguments(theObj));
    }

    public List<E> getData(String theCondition, String[] theArguments) {
        List<E> result = new LinkedList<>();

        ILAPIDBFacade facade = getFacade();
        Cursor cursor = facade.getAllRecords(getTableName(), null,
                                             theCondition, theArguments
        );

        boolean moved = cursor.moveToFirst();
        while (moved) {
            E obj = newInstance();
            obj.initialize(cursor);

            result.add(obj);

            moved = cursor.moveToNext();
        }

        cursor.close();

        return result;
    }

    protected List<E> querySafe(String theQuery, String[] theArguments) {
        ILAPIDBFacade facade = getFacade();

        try {
            facade.open();
            return query(theQuery, theArguments);

        } finally {
            facade.close();
        }
    }

    private List<E> query(String theQuery, String[] theArguments) {
        List<E> result = new LinkedList<>();

        ILAPIDBFacade facade = getFacade();
        Cursor cursor = facade.query(theQuery, theArguments);

        boolean moved = cursor.moveToFirst();
        while (moved) {
            E obj = newInstance();
            obj.initialize(cursor);

            result.add(obj);

            moved = cursor.moveToNext();
        }
        cursor.close();

        return result;
    }

    private List<E> getDataBySqlQuery(final String theSqlQuery, final String[] theArguments) {
        List<E> result = new LinkedList<>();

        ILAPIDBFacade facade = getFacade();
        Cursor cursor = facade.query(theSqlQuery, theArguments);

        boolean moved = cursor.moveToFirst();
        while (moved) {
            E obj = newInstance();
            obj.initialize(cursor);

            result.add(obj);

            moved = cursor.moveToNext();
        }

//        if (cursor != null) {
        cursor.close();
//        }

        return result;
    }

    public List<E> getDataBySqlQuerySafe(String theSqlQuery, String[] theArguments) {
        ILAPIDBFacade facade = getFacade();
        try {
            facade.open();

            return getDataBySqlQuery(theSqlQuery, theArguments);
        } finally {
            facade.close();
        }
    }

    public EntityCursor getCursorBySqlQuery(String theSqlQuery, String[] theArguments) {
        ILAPIDBFacade facade = getFacade();
        Cursor cursor = facade.query(theSqlQuery, theArguments);
        return new EntityCursor(cursor);
    }

    public EntityCursor getCursorBySqlQuerySafe(String theSqlQuery, String[] theArguments) {
        ILAPIDBFacade facade = getFacade();
        try {
            facade.open();

            return getCursorBySqlQuery(theSqlQuery, theArguments);
        } finally {
            facade.close();
        }
    }

    public List<E> getData(I theObj) {
        return getData(getSearchCondition(), getSearchConditionArguments(theObj));
    }

    public List<E> getAllSafe() {
        ILAPIDBFacade facade = getFacade();
        try {
            facade.open();
            return getAll();

        } finally {
            facade.close();
        }
    }

    public List<E> getAll() {
        return getData(null, null);
    }

    public void saveDataSafe(List<E> theList) {
        ILAPIDBFacade facade = getFacade();
        try {
            facade.open();
            saveData(theList);
        } finally {
            facade.close();
        }
    }

    public void saveDataSafe(E theItem) {
        ILAPIDBFacade facade = getFacade();
        try {
            facade.open();
            saveData(theItem);
        } finally {
            facade.close();
        }
    }

    public void saveData(List<E> theList) {
        for (E obj : theList) {
//            Log.d("saving", obj.toString());
            saveData(obj);
        }
    }

    public void saveOrUpdateData(List<E> theList) {
        for (E obj : theList) {
            saveOrUpdate(obj);
        }
    }

    public void saveOrUpdateDataSafe(List<E> theList) {
        ILAPIDBFacade facade = getFacade();
        try {
            facade.open();
            saveOrUpdateData(theList);
        } finally {
            facade.close();
        }
    }

    public void saveOrUpdateSafe(E theObj) {
        ILAPIDBFacade facade = getFacade();

        try {
            facade.open();
            saveOrUpdate(theObj);
        } finally {
            facade.close();
        }
    }

    public void saveOrUpdate(E theObj) {
        if (theObj != null) {
            if (!containsData(theObj)) {
                saveData(theObj);
            } else {
                updateData(theObj);
            }
        }
    }

    public long saveData(E theObj) {
        if (theObj == null) {
            throw new IllegalArgumentException("Object can't be null");
        }

        ContentValues values = theObj.getContentValues();
        ILAPIDBFacade facade = getFacade();
        return facade.save(getTableName(), values);
    }

    public int updateData(E theObj) {
        if (theObj == null) {
            throw new IllegalArgumentException("Object can't be null");
        }

        ContentValues values = theObj.getContentValues();

        ILAPIDBFacade facade = getFacade();
        return facade.update(getTableName(), getSearchCondition(),
                             getSearchConditionArguments(theObj.getId()), values
        );
    }

    protected String getSqlQuery(int theResId) {
        ILAPIDBFacade facade = getFacade();
        return facade.getQuery(theResId);
    }

    public void clearData() {
        ILAPIDBFacade facade = getFacade();
        facade.clearTable(getTableName());
    }

    public static int getIntFromBool(boolean theValue) {
        return theValue ? 1 : 0;
    }

    public static boolean getBoolFromInt(int theValue) {
        return theValue >= 1;
    }

    public class EntityCursor {
        private Cursor cursor;

        public EntityCursor(Cursor theCursor) {
            this.cursor = theCursor;
            AbstractEntityDAO.this.getFacade().open();
        }

        private E getDataFromCursor(Cursor theCursor) {
            E obj = AbstractEntityDAO.this.newInstance();
            obj.initialize(cursor);
            return obj;
        }

        public E getNext() {
            boolean mooved = cursor.moveToNext();
            if (mooved) {
                return getDataFromCursor(cursor);
            } else {
                return null;
            }
        }

        public E getPrevious() {
            boolean mooved = cursor.moveToPrevious();
            if (mooved) {
                return getDataFromCursor(cursor);
            } else {
                return null;
            }
        }

        public E getAtPosition(int thePosition) {
            boolean mooved = cursor.moveToPosition(thePosition);
            if (mooved) {
                return getDataFromCursor(cursor);
            } else {
                return null;
            }
        }

        public int getCount() {
            return cursor.getCount();
        }

        /**
         * Call this method to close database after cursor isn't needed
         */
        public void closeCursor() {
            this.cursor.close();
            AbstractEntityDAO.this.getFacade().close();
        }

    }

}
